# This specifies the driver for connecting to a MySQL database. The driver is like a "translator" that allows your application to communicate with MySQL.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# This specifies the URL for connecting to your MySQL database. And everything after the ? tells Springboot how it should connect to our DB. Everything after the ? is optional but it's useful to add more information concerning how Springboot should connect to the database
        # localhost: Your database is running on your local machine.
        # 3306: The default port number for MySQL.
        # reactlibrarydatabase: This is the name of your database.
        # useSSL=false: Disables SSL (secure connection).
        # useUnicode=yes&characterEncoding=UTF-8: Ensures proper handling of Unicode characters in the database (e.g. the unicode value for & is 'U+0026').
        # allowPublicKeyRetrieval=true: Allows the app to retrieve the public key from the database server.
        # serverTimezone=UTC: Sets the server timezone to UTC.
spring.datasource.url=jdbc:mysql://localhost:3306/reactlibrarydatabase?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC

# Defines the name of the DB
spring.datasource.username=root

# Defines the password of the DB
spring.datasource.password=emmanuel


# Hibernate is the tool that translates Java objects into database queries.
# MySQL8Dialect tells Hibernate that you're working with a MySQL 8 database, so it uses the right SQL syntax. Different databases (MySQL, PostgreSQL, etc.) have different ways of writing SQL. The dialect makes sure that Hibernate generates SQL queries that work for MySQL 8.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# This sets a base path for all your REST API URLs
spring.data.rest.base-path=/api


# This is the client ID for Okta, a service that manages user authentication (login). The client ID identifies your application with Okta.
# When a user logs in or authenticates, this client-id tells Okta which application is requesting the token.
okta.oauth2.client-id=0xxxxxxxxxxxxx

# This is the issuer URL for Okta, which tells the app where to send login requests. The issuer URL represents your Okta organization. The issuer is the base URL of Okta?s authorization server for your organization.
#This is where Okta handles token issuance, token validation, and other OAuth2.0 operations.
okta.oauth2.issuer=https://dev-XXXXXXX.okta.com/oauth2/default